recombee.database=dacn-dev
recombee.api_key=aG1RT8xXEINqWHlONh1PqDZYkLu8qV1oXe8mjRFIQaE0GC7WgD4gjSTmW6TOYIh2

# Common Kafka Broker Address (Both Services)
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}

# --- Order Service Specific Properties ---

# Producer settings (mostly covered by your Java config, but can be set here too)
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer settings (If Order Service needs to listen for feedback from Inventory)
# spring.kafka.consumer.group-id=order-service-feedback-group
# spring.kafka.consumer.auto-offset-reset=earliest
# spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
# # CRITICAL for JSON: Trust packages containing expected EVENT classes from Inventory Service
# spring.kafka.consumer.properties.spring.json.trusted.packages=com.ecommerce.common.event.inventory,com.ecommerce.order.event # Add others if needed

# Topic Names Used by Order Service
#app.kafka.topics.order-events=order-events
# app.kafka.topics.order-feedback=order-feedback # Topic to listen for inventory results


# --- Inventory Service Specific Properties ---

# Producer settings (If Inventory Service sends feedback events)
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer settings (For listening to inventory requests from Order Service)
# Match the @KafkaListener groupId
spring.kafka.consumer.group-id=inventory-group
# Process from the beginning if offset is lost
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# Configure the delegates for ErrorHandlingDeserializer
#spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
# CRITICAL for JSON: Trust packages containing expected EVENT classes from Order Service
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=\
com.ecommerce.order.model.event.ReserveInventoryRequestEvent:com.ecommerce.inventory.model.event.ReserveInventoryRequestEvent,\
com.ecommerce.order.model.event.InventoryReservationConfirmedEvent:com.ecommerce.inventory.model.event.InventoryReservationConfirmedEvent,\
com.ecommerce.order.model.event.InventoryReservationReleasedEvent:com.ecommerce.inventory.model.event.InventoryReservationReleasedEvent
# Optional: Define a default type if messages might not have type headers
# spring.kafka.consumer.properties.spring.json.value.default.type=com.ecommerce.common.event.inventory.BaseInventoryEvent # Or specific type if only one is expected


app.kafka.topics.dbz-products=postgres.public.product


# Topic Names Used by Inventory Service
app.kafka.topics.inventory-requests=inventory-requests
app.kafka.topics.order-feedback=order-feedback