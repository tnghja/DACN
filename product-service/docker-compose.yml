
services:
  api-gateway:
    image: tnghja/api-gateway # The Docker image for the API Gateway
    container_name: api-gateway-container # A specific name for the container
    ports:
      - "8888:8888" # Map port 8080 on the host to port 8080 in the container
      # Adjust the container port (right side) if the gateway listens on a different port
    depends_on: # Optional: Ensure other services start before the gateway, if needed
      - identity-service
      - inventory-service
      - order-service
      - product-service
    restart: always # Restart the container if it stops
    environment:
      # Define URLs for the backend services the gateway needs to communicate with
      # Uses service names as hostnames (Docker Compose network) and their exposed ports
      IDENTITY_HOST: identity-service:8081 # Points to the identity-service below
      PRODUCT_HOST: product-service:8082   # Points to the product-service below
      ORDER_HOST: order-service:8083     # Points to the order-service below
      INVENTORY_HOST: inventory-service:8084 # Points to the inventory-service below

    networks:
      - microservice-network

  identity-service:
    image: tnghja/identity-service
    container_name: identity-service-container
    expose:
      - "8081" # Expose port 8081 internally within the Docker network (adjust if needed)
    restart: always
    environment:
      # --- Database Credentials ---
      # IMPORTANT: Fill in your actual database credentials below
      DB_URL: jdbc:postgresql://shinkansen.proxy.rlwy.net:20720/railway # e.g., jdbc:postgresql://your_db_host:port/dbname
      DB_USERNAME: postgres
      DB_PASSWORD: DBstXTsvzBFIaAAXkAEjUrvdEZJNZwnc
      # --- Other Environment Variables ---
      # Add any other required variables for this service
    networks:
      - microservice-network

  inventory-service:
    image: tnghja/inventory-service
    container_name: inventory-service-container
    expose:
      - "8084" # Expose port 8084 internally (adjust if needed)
    restart: always
    environment:
      # --- Database Credentials (Using external Railway DB) ---
      DB_URL: jdbc:postgresql://shortline.proxy.rlwy.net:21144/railway
      DB_USERNAME: postgres
      DB_PASSWORD: mcjzIDpMEutmPiIHISyluLpPwBLTOFoo # Consider using Docker secrets or .env file for passwords
      # --- Kafka Configuration ---
      # Assuming it uses the same external Kafka as order-service
      KAFKA_HOST: 160.191.89.22:8082 # Points to an external Kafka broker
      # --- Other Environment Variables ---
      # Add any other required variables for this service
    networks:
      - microservice-network

  order-service:
    image: tnghja/order-service
    container_name: order-service-container
    expose:
      - "8083" # Expose port 8083 internally (adjust if needed)
    restart: always
    environment:
      # --- Database Credentials (Using external Railway DB) ---
      DB_URL: jdbc:postgresql://maglev.proxy.rlwy.net:33539/railway
      DB_USERNAME: postgres
      DB_PASSWORD: zlWjFMRaWXkyntIOddelnmtMPQtFNGeB # Consider using Docker secrets or .env file for passwords
      # --- Kafka Configuration ---
      KAFKA_HOST: 160.191.89.22:8082 # Points to an external Kafka broker
      # --- Other Environment Variables ---
      # Add any other required variables for this service
    networks:
      - microservice-network

  product-service:
    image: tnghja/product-service
    container_name: product-service-container
    expose:
      - "8082" # Expose port 8082 internally (adjust if needed)
    restart: always
    environment:
      # --- Database Credentials (Using external Railway DB) ---
      DB_URL: jdbc:postgresql://turntable.proxy.rlwy.net:49001/railway
      DB_USERNAME: postgres
      DB_PASSWORD: KwaZxVurfKzjpRdllGSCvZFNaBVxCclY # Consider using Docker secrets or .env file for passwords
      # --- Other Environment Variables ---
      FE_HOST: <your_frontend_host_url> # Placeholder - Add the URL if needed by the service
      # Add any other required variables for this service
    networks:
      - microservice-network

networks:
  microservice-network: # Define a custom network for the services
    driver: bridge