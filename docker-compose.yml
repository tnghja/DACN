# docker-compose.yml
version: '3.8'


volumes:
  postgres_data:
    name: imagesearch_postgres_data
  es_secure_data:
    driver: local
  nginx_certs:
    name: nginx

services:
  nginx:
    image: nginx:rollback
    container_name: nginx-https
    ports:
      - "4443:443"   # Use 4443 for HTTPS
      - "8890:80"    # Use 8890 for HTTP
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - microservice-network
  zookeeper:

    image: cp-zookeeper:rollback
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo ruok | nc -w 2 localhost 2181 | grep imok" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  kafka:
    image: cp-kafka:rollback
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "0.0.0.0:9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 10s
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "0.0.0.0:8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  kafka-connect:
    image: debezium/connect:3.0.0.Final
    container_name: kafka-connect
    restart: always
    depends_on:
      - kafka
    ports:
      - "0.0.0.0:8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: "debezium-connect"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      PLUGIN_PATH: "/kafka/connect"
    volumes:
      - ./kafka-connect-plugins:/kafka/connect
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  postgres:
    image: postgres:rollback
    container_name: postgres
    restart: always
    ports:
      - "0.0.0.0:5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: t12987hjqw98
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres -c wal_level=logical -c max_replication_slots=5 -c max_wal_senders=5
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 10s
  elasticsearch:
    image: elasticsearch:8.17.5
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.token.enabled=true
      - ELASTIC_PASSWORD=qweriuhjkasfy8912k1h@alk  # ✅ đặt mật khẩu ở đây
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.ml.enabled=false
      - xpack.watcher.enabled=false
      - xpack.monitoring.collection.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300"
    networks:
      - microservice-network
    restart: always
    volumes:
      - es_secure_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -u elastic:qweriuhjkasfy8912k1h@alk -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.11.3
#    container_name: kibana
#    ports:
#      - "5601:5601"
#    environment:
#      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
#    depends_on:
#      - elasticsearch

    # ================= SERVICES =================
  extract-model:
    image: dinhthai/extract-model:1.2
    container_name: extract-model
    ports:
      - "8000:8000"
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ] # Basic HTTP check; replace with specific endpoint if available
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  consumer-images:
    image: dinhthai/consumer-images:1.1
    container_name: consumer-images
    depends_on:
      - extract-model
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - ./service-env/.env_consumer
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ] # Port check since no /health endpoint
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  search-service:
    image: dinhthai/search-service:1.7
    container_name: search-service
    depends_on:
      - postgres
      - elasticsearch
    ports:
      - "3006:8081"
    env_file:
      - ./service-env/.env_search-service
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ] # Basic HTTP check; replace with specific endpoint if available
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  recombee-service:
    image: dinhthai/recombee-service:1.5
    container_name: recombee-service
    ports:
      - "3001:8081"
    env_file:
      - ./service-env/.env_recombee-service
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ] # Basic HTTP check; replace with specific endpoint if available
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  api-gateway:
    image: tnghja/api-gateway:1.8
    container_name: api-gateway-container
    ports:
      - "${EX_API_GATEWAY_PORT}:${API_GATEWAY_PORT}" # <-- Set in .env (e.g. 8888)
#    depends_on:
#      - identity-service
#      - inventory-service
#      - order-service
#      - product-service
    restart: always
    environment:
      IDENTITY_HOST: ${API_GATEWAY_IDENTITY_HOST}
      PRODUCT_HOST: ${API_GATEWAY_PRODUCT_HOST}
      ORDER_HOST: ${API_GATEWAY_ORDER_HOST}
      INVENTORY_HOST: ${API_GATEWAY_INVENTORY_HOST}
      SEARCH_HOST: ${API_GATEWAY_SEARCH_HOST}
      REC_HOST: ${API_GATEWAY_REC_HOST}
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT}" ] # Basic HTTP check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  identity-service:
    image: tnghja/identity-service:1.5
    container_name: identity-service-container
    expose:
      - "${IDENTITY_PORT}"
    ports:
      - "${EX_IDENTITY_PORT}:${IDENTITY_PORT}"
    restart: always
    environment:
      IDENTITY_PORT: ${IDENTITY_PORT}
      DB_URL: ${IDENTITY_DB_URL}
      DB_USERNAME: ${IDENTITY_DB_USERNAME}
      DB_PASSWORD: ${IDENTITY_DB_PASSWORD}
      BACKEND_HOST: ${API_GATEWAY_HOST}/identity
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${IDENTITY_PORT}" ] # Basic HTTP check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  inventory-service:
    image: tnghja/inventory-service:1.1
    container_name: inventory-service-container
    expose:
      - "${INVENTORY_PORT}"
    ports:
      - "${EX_INVENTORY_PORT}:${INVENTORY_PORT}"
    restart: always
    environment:
      INVENTORY_PORT: ${INVENTORY_PORT}
      DB_URL: ${INVENTORY_DB_URL}
      DB_USERNAME: ${INVENTORY_DB_USERNAME}
      DB_PASSWORD: ${INVENTORY_DB_PASSWORD}
      KAFKA_HOST: ${KAFKA_HOST}
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${INVENTORY_PORT}" ] # Basic HTTP check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  order-service:
    image: tnghja/order-service:1.8
    container_name: order-service-container
    expose:
      - "${ORDER_PORT}"
    ports:
      - "${EX_ORDER_PORT}:${ORDER_PORT}"
    restart: always
    environment:
      ORDER_PORT: ${ORDER_PORT}
      DB_URL: ${ORDER_DB_URL}
      DB_USERNAME: ${ORDER_DB_USERNAME}
      DB_PASSWORD: ${ORDER_DB_PASSWORD}
      KAFKA_HOST: ${KAFKA_HOST}
      BACKEND_HOST: "http://${HOST_IP}:${EX_ORDER_PORT}"
      FE_HOST: "${PRODUCT_FE_HOST}"
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${ORDER_PORT}" ] # Basic HTTP check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  product-service:
    image: tnghja/product-service:1.6
    container_name: product-service-container
    expose:
      - "${PRODUCT_PORT}"
    ports:
      - "${EX_PRODUCT_PORT}:${PRODUCT_PORT}"
    restart: always
    environment:
      PRODUCT_PORT: ${PRODUCT_PORT}
      DB_URL: ${PRODUCT_DB_URL}
      DB_USERNAME: ${PRODUCT_DB_USERNAME}
      DB_PASSWORD: ${PRODUCT_DB_PASSWORD}
      FE_HOST: ${PRODUCT_FE_HOST}
      ORDER_HOST: "http://order-service:${ORDER_PORT}"
      KAFKA_HOST : ${KAFKA_HOST}
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${PRODUCT_PORT}" ] # Basic HTTP check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
networks:
  microservice-network: # Define a custom network for the services
    driver: bridge



